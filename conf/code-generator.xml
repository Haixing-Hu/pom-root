<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<codeTemplateList>
    <templates>
        <templates version="1.3">
            <id>a1d00b36-3cfb-4372-bd28-39e2721bb686</id>
            <name>Getter and Setter</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>body</type>
            <enabled>true</enabled>
            <template>#foreach($field in $fields)
#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))
#if ($field.boolean)
#set($getter = "is${name}")
#else
#set($getter = "get${name}")
#end
#set($setter = "set${name}")
#if ($field.raw.hasAnnotation("javax.annotation.Nullable"))
@Nullable
#end
public ##
#if($field.modifierStatic)
static ##
#end
$field.type ##
${getter}() {
return $field.name;
}

public ##
#if($field.modifierStatic)
static ##
#end
#set($paramName = $helper.getParamName($field.element, $project))
void ${setter}(##
#if ($field.raw.hasAnnotation("javax.annotation.Nullable"))
@Nullable ##
#end
final $field.type $paramName) {
#if ($field.name == $paramName)
    #if (!$field.modifierStatic)
    this.##
    #else
        $classname.##
    #end
#end
$field.name = $paramName;
}
#end</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>false</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName></filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>false</enableMethods>
                    <providerTemplate>#set($availableMembers = [])
#set($methodNames = [])
#foreach($method in $class0.methods)
$methodNames.add($method.methodName)
#end
#foreach($field in $class0.fields)
#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))
#if ($field.boolean &amp;&amp; $field.primitive)
#set($getter = "is${name}")
#else
#set($getter = "get${name}")
#end
#set($setter = "set${name}")
#if (!$methodNames.contains($getter) || !$methodNames.contains($setter))
$availableMembers.add($field)
#end
#end
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>false</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>1</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>$class0.name</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
        <templates version="1.3">
            <id>1aaf3e8a-c0f6-4001-9bb3-14a11550aef9</id>
            <name>Copy constructor, assign() and clone()</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>body</type>
            <enabled>true</enabled>
            <template>## Tutorial for writing your templates
##
## 1. First you need to know basic syntax of velocity[1].
## 2. Then it is necessary to understand the variable that CodeGenerator provides
##    and its inner structure for retrieving the information you need for generating code.
## 3. Learn to use the utils provided so that you can ask for further information
##    or reduce your workload.
##
## Variables Provided (Class Mode)
## -------------------------------
## Class mode means you want to create new classes(file).
##
## - ClassName: String     The name spcified by `Target Class Name`
## - PackageName: String   The package name specified by `Target Class Name`
## - class0: ClassEntry    The class that the action is triggered upon
##   - raw: PsiClass
##   - String packageName
##   - importList: List&lt;String&gt;
##   - fields: List&lt;FieldEntry&gt;
##   - allFields: List&lt;FieldEntry&gt;
##   - methods: List&lt;MethodEntry&gt;
##   - allMethods: List&lt;MethodEntry&gt;
##   - innerClasses: List&lt;ClassEntry&gt;
##   - allInnerClasses: List&lt;ClassEntry&gt;
##   - typeParamList:  List&lt;String&gt;
##   - name: String
##   - superName: String
##   - superQualifiedName: String
##   - qualifiedName: String
##   - typeParams: int
##   - hasSuper: boolean
##   - deprecated: boolean
##   - enum: boolean
##   - exception: boolean
##   - abstract: boolean
##   - implementNames: String[]
##   - isImplements(String): bool
##   - isExtends(String): bool
##   - matchName(String): bool
##
## - class1: ClassEntry    The first selected class, where `1` is the postfix
##                         you specify in pipeline
##   ...
##
## - MemberEntry (FieldEntry/MethodEntry common properties)
##    - raw: PsiField(for field), PsiMethod(for method)
##    - name: String
##    - accessor: String
##    - array: boolean
##    - nestedArray: boolean
##    - collection: boolean
##    - map: boolean
##    - primitive: boolean
##    - string: boolean
##    - primitiveArray: boolean
##    - objectArray: boolean
##    - numeric: boolean
##    - object: boolean
##    - date: boolean
##    - set: boolean
##    - list: boolean
##    - stringArray: boolean
##    - calendar: boolean
##    - typeName: String
##    - typeQualifiedName: String
##    - type: String
##    - boolean: boolean
##    - long: boolean
##    - float: boolean
##    - double: boolean
##    - void: boolean
##    - notNull: boolean
##    - char: boolean
##    - byte: boolean
##    - short: boolean
##    - modifierStatic: boolean
##    - modifierPublic: boolean
##    - modifierProtected: boolean
##    - modifierPackageLocal: boolean
##    - modifierPrivate: boolean
##    - modifierFinal: boolean
##
## - FieldEntry
##   - constant: boolean
##   - modifierTransient: boolean
##   - modifierVolatile: boolean
##   - enum: boolean
##   - matchName(String): bool
##
## - MethodEntry
##   - methodName: String
##   - fieldName: String
##   - modifierAbstract: boolean
##   - modifierSynchronzied: boolean
##   - modifierSynchronized: boolean
##   - returnTypeVoid: boolean
##   - getter: boolean
##   - deprecated: boolean
##   - matchName(String): bool
##
## Variables for Body Mode
## -----------------------
## - class0: ClassEntry         The current class
## - fields: List&lt;FieldEntry&gt;   All selected fields
## - methods: List&lt;MethodEntry&gt; All selected methods
## - members: List&lt;MemberEntry&gt; selected fields+methods
## - parentMethod: MethodEntry  The nearest method that surround the current cursor
##
## Utilities
## ---------
## - settings: CodeStyleSettings settings of code style
## - project: Project            The project instance, normally used by Psi related utilities
## - helper: GenerationHelper
## - StringUtil: Class
## - NameUtil: Class
## - PsiShortNamesCache: Class   utility to search classes
## - PsiJavaPsiFacade: Class     Java specific utility to search classes
## - GlobalSearchScope: Class    class to create search scopes, used by above utilities
## - EntryFactory: Class         EntryFactory.of(...) to turn PsiXXX to XXXEntry.
##
## Other feature
## -------------
## - Auto import.      If the generated code contains full qualified name, Code Generator will try to
##                     import the packages automatically and shorten the name.
##                     For example `java.util.List&lt;&gt;` -&gt; `List&lt;&gt;`
##
## References
## ----------
## - Velocity syntax: http://velocity.apache.org/engine/1.7/user-guide.html
public ${class0.name}() {
  // empty
}

public ${class0.name}(final ${class0.name} other) {
  assign(other);
}

@Override
public void assign(final ${class0.name} other) {
  ltd.qubit.commons.lang.Argument.requireNonNull("other", other);
#foreach($field in $fields)
  #if ($field.primitive || $field.boolean || $field.char || $field.numeric || $field.string || $field.enum)
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Duration")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Instant")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalDate")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.MonthDay")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.OffsetDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.OffsetTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Period")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Year")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.YearMonth")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZonedDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZoneId")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZoneOffset")
  ${field.name} = other.${field.name};
  #elseif ($field.date || $field.primitiveArray || $field.stringArray)
  ${field.name} = ltd.qubit.commons.lang.Assignment.clone(other.${field.name});
  #elseif ($field.list || $field.set || $field.map || $field.objectArray)
  ${field.name} = ltd.qubit.commons.lang.Assignment.deepClone(other.${field.name});
  #else
  ${field.name} = ltd.qubit.commons.lang.Assignment.clone(other.${field.name});
  #end
#end
}

@Override
public ${class0.name} clone() {
  return new ${class0.name}(this);
}</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>true</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName></filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>false</enableMethods>
                    <providerTemplate>## set `availableMembers` to provide the members to select
## set `selectedMembers` to select the members initially, set nothing to select all
## Note that it should be type List&lt;PsiMember&gt; or List&lt;MemberEntry&gt;
## And the selected result will be
## - fields1:  List&lt;FieldEntry&gt; where `1` is the step number that you specified
## - methods1: List&lt;MethodEntry&gt;
## - members:  List&lt;MemberEntry&gt;
#set($availableMembers = $class0.members)
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>false</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>1</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>REPLACE</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>$class0.name</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
        <templates version="1.3">
            <id>0a5fc698-e32c-4007-9b6b-29e2ac610ffb</id>
            <name>Standard Model</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>body</type>
            <enabled>true</enabled>
            <template>public ${class0.name}() {
  // empty
}
#if ($class0.isImplements("ltd.qubit.commons.lang.Assignable"))
public ${class0.name}(final ${class0.name} other) {
  assign(other);
}

@Override
public void assign(final ${class0.name} other) {
  ltd.qubit.commons.lang.Argument.requireNonNull("other", other);
#foreach($field in $fields)
  #if ($field.primitive || $field.boolean || $field.char || $field.numeric || $field.string || $field.enum)
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Duration")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Instant")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalDate")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.LocalTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.MonthDay")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.OffsetDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.OffsetTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Period")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.Year")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.YearMonth")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZonedDateTime")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZoneId")
  ${field.name} = other.${field.name};
  #elseif ($field.typeQualifiedName == "java.time.ZoneOffset")
  ${field.name} = other.${field.name};
  #elseif ($field.date || $field.primitiveArray || $field.stringArray)
  ${field.name} = ltd.qubit.commons.lang.Assignment.clone(other.${field.name});
  #elseif ($field.list || $field.set || $field.map || $field.objectArray)
  ${field.name} = ltd.qubit.commons.lang.Assignment.deepClone(other.${field.name});
  #else
  ${field.name} = ltd.qubit.commons.lang.Assignment.clone(other.${field.name});
  #end
#end
}

@Override
public ${class0.name} clone() {
  return new ${class0.name}(this);
}
#end

#foreach($field in $fields)
#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))
#if ($field.boolean)
#set($getter = "is${name}")
#else
#set($getter = "get${name}")
#end
#set($setter = "set${name}")
#if ($field.raw.hasAnnotation("javax.annotation.Nullable"))
@Nullable
#end
public ##
#if($field.modifierStatic)
static ##
#end
$field.type ##
${getter}() {
return $field.name;
}

public ##
#if($field.modifierStatic)
static ##
#end
#set($paramName = $helper.getParamName($field.element, $project))
void ${setter}(##
#if ($field.raw.hasAnnotation("javax.annotation.Nullable"))
@Nullable ##
#end
final $field.type $paramName) {
#if ($field.name == $paramName)
    #if (!$field.modifierStatic)
    this.##
    #else
        $classname.##
    #end
#end
$field.name = $paramName;
}
#end

#macro(generateTypeParams)
  #if ($class0.typeParamList.size() &gt; 0)
  &lt;##
    #foreach( $type in $class0.typeParamList )
      #if ($foreach.index &gt; 0)
      , ##
      #end
      ?##
    #end
  &gt;##
  #end
#end
#set( $typeParams = "#generateTypeParams()" )
public boolean equals(final Object o){
  if (this == o) {
    return true;
  }
  if ((o == null) || (getClass() != o.getClass())) {
    return false;
  }
  final $class0.name$typeParams other = ($class0.name$typeParams) o;
  return ##
#if ($class0.hasSuper)
super.equals(other)##
#foreach($field in $fields)

&amp;&amp; ltd.qubit.commons.lang.Equality.equals($field.accessor, other.$field.accessor)##
#end
#else
#foreach($field in $fields)
#if($velocityCount &gt; 1)

&amp;&amp; ##
#end
ltd.qubit.commons.lang.Equality.equals($field.accessor, other.$field.accessor) ##
    #end
#end
;
}

public int hashCode() {
final int multiplier = 7;
int result = 3;
#if ($class0.hasSuper)
result = ltd.qubit.commons.lang.Hash.combine(result, multiplier, super.hashCode());
#end
#foreach($field in $fields)
result = ltd.qubit.commons.lang.Hash.combine(result, multiplier, $field.accessor);
#end
return result;
}

public String toString() {
return new ltd.qubit.commons.text.tostring.ToStringBuilder(this)
#if ($class0.hasSuper)
.appendSuper(super.toString())
#end
#foreach ($field in $fields)
.append("$field.name", $field.accessor)
#end
.toString();
}</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>false</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName></filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>false</enableMethods>
                    <providerTemplate>## set `availableMembers` to provide the members to select
## set `selectedMembers` to select the members initially, set nothing to select all
## Note that it should be type List&lt;PsiMember&gt; or List&lt;MemberEntry&gt;
## And the selected result will be
## - fields1:  List&lt;FieldEntry&gt; where `1` is the step number that you specified
## - methods1: List&lt;MethodEntry&gt;
## - members:  List&lt;MemberEntry&gt;
#set($availableMembers = $class0.members)
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>false</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>1</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>$class0.name</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
        <templates version="1.3">
            <id>a7f3f0a2-c5d5-4ef4-844c-e02f9026bda6</id>
            <name>equals() &amp; hashCode()  &amp; toString()</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>body</type>
            <enabled>true</enabled>
            <template>#macro(generateTypeParams)
  #if ($class0.typeParamList.size() &gt; 0)
  &lt;##
    #foreach( $type in $class0.typeParamList )
      #if ($foreach.index &gt; 0)
      , ##
      #end
      ?##
    #end
  &gt;##
  #end
#end
#set( $typeParams = "#generateTypeParams()" )
public boolean equals(final Object o){
  if (this == o) {
    return true;
  }
  if ((o == null) || (getClass() != o.getClass())) {
    return false;
  }
  final $class0.name$typeParams other = ($class0.name$typeParams) o;
  return ##
#if ($class0.hasSuper)
super.equals(other)##
#foreach($field in $fields)

&amp;&amp; ltd.qubit.commons.lang.Equality.equals($field.accessor, other.$field.accessor)##
#end
#else
#foreach($field in $fields)
#if($velocityCount &gt; 1)

&amp;&amp; ##
#end
ltd.qubit.commons.lang.Equality.equals($field.accessor, other.$field.accessor) ##
    #end
#end
;
}

public int hashCode() {
final int multiplier = 7;
int result = 3;
#if ($class0.hasSuper)
result = ltd.qubit.commons.lang.Hash.combine(result, multiplier, super.hashCode());
#end
#foreach($field in $fields)
result = ltd.qubit.commons.lang.Hash.combine(result, multiplier, $field.accessor);
#end
return result;
}

public String toString() {
return new ltd.qubit.commons.text.tostring.ToStringBuilder(this)
#if ($class0.hasSuper)
.appendSuper(super.toString())
#end
#foreach ($field in $fields)
.append("$field.name", $field.accessor)
#end
.toString();
}</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>true</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName></filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>false</enableMethods>
                    <providerTemplate>## set `availableMembers` to provide the members to select
## set `selectedMembers` to select the members initially, set nothing to select all
## Note that it should be type List&lt;PsiMember&gt; or List&lt;MemberEntry&gt;
## And the selected result will be
## - fields1:  List&lt;FieldEntry&gt; where `1` is the step number that you specified
## - methods1: List&lt;MethodEntry&gt;
## - members:  List&lt;MemberEntry&gt;
#set($availableMembers = $class0.members)
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>false</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>1</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>${class0.qualifiedName}Test</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
        <templates version="1.3">
            <id>b5f8a78e-d955-41b6-8e12-ef44a69f21de</id>
            <name>Unit Test of getField() by getters/setters</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>body</type>
            <enabled>true</enabled>
            <template>## Tutorial for writing your templates
##
## 1. First you need to know basic syntax of velocity[1].
## 2. Then it is necessary to understand the variable that CodeGenerator provides
##    and its inner structure for retrieving the information you need for generating code.
## 3. Learn to use the utils provided so that you can ask for further information
##    or reduce your workload.
##
## Variables Provided (Class Mode)
## -------------------------------
## Class mode means you want to create new classes(file).
##
## - ClassName: String     The name spcified by `Target Class Name`
## - PackageName: String   The package name specified by `Target Class Name`
## - class0: ClassEntry    The class that the action is triggered upon
##   - raw: PsiClass
##   - String packageName
##   - importList: List&lt;String&gt;
##   - fields: List&lt;FieldEntry&gt;
##   - allFields: List&lt;FieldEntry&gt;
##   - methods: List&lt;MethodEntry&gt;
##   - allMethods: List&lt;MethodEntry&gt;
##   - innerClasses: List&lt;ClassEntry&gt;
##   - allInnerClasses: List&lt;ClassEntry&gt;
##   - typeParamList:  List&lt;String&gt;
##   - name: String
##   - superName: String
##   - superQualifiedName: String
##   - qualifiedName: String
##   - typeParams: int
##   - hasSuper: boolean
##   - deprecated: boolean
##   - enum: boolean
##   - exception: boolean
##   - abstract: boolean
##   - implementNames: String[]
##   - isImplements(String): bool
##   - isExtends(String): bool
##   - matchName(String): bool
##
## - class1: ClassEntry    The first selected class, where `1` is the postfix
##                         you specify in pipeline
##   ...
##
## - MemberEntry (FieldEntry/MethodEntry common properties)
##    - raw: PsiField(for field), PsiMethod(for method)
##    - name: String
##    - accessor: String
##    - array: boolean
##    - nestedArray: boolean
##    - collection: boolean
##    - map: boolean
##    - primitive: boolean
##    - string: boolean
##    - primitiveArray: boolean
##    - objectArray: boolean
##    - numeric: boolean
##    - object: boolean
##    - date: boolean
##    - set: boolean
##    - list: boolean
##    - stringArray: boolean
##    - calendar: boolean
##    - typeName: String
##    - typeQualifiedName: String
##    - type: String
##    - boolean: boolean
##    - long: boolean
##    - float: boolean
##    - double: boolean
##    - void: boolean
##    - notNull: boolean
##    - char: boolean
##    - byte: boolean
##    - short: boolean
##    - modifierStatic: boolean
##    - modifierPublic: boolean
##    - modifierProtected: boolean
##    - modifierPackageLocal: boolean
##    - modifierPrivate: boolean
##    - modifierFinal: boolean
##
## - FieldEntry
##   - constant: boolean
##   - modifierTransient: boolean
##   - modifierVolatile: boolean
##   - enum: boolean
##   - matchName(String): bool
##
## - MethodEntry
##   - methodName: String
##   - fieldName: String
##   - modifierAbstract: boolean
##   - modifierSynchronzied: boolean
##   - modifierSynchronized: boolean
##   - returnTypeVoid: boolean
##   - getter: boolean
##   - deprecated: boolean
##   - matchName(String): bool
##
## Variables for Body Mode
## -----------------------
## - class0: ClassEntry         The current class
## - fields: List&lt;FieldEntry&gt;   All selected fields
## - methods: List&lt;MethodEntry&gt; All selected methods
## - members: List&lt;MemberEntry&gt; selected fields+methods
## - parentMethod: MethodEntry  The nearest method that surround the current cursor
##
## Utilities
## ---------
## - settings: CodeStyleSettings settings of code style
## - project: Project            The project instance, normally used by Psi related utilities
## - helper: GenerationHelper
## - StringUtil: Class
## - NameUtil: Class
## - PsiShortNamesCache: Class   utility to search classes
## - PsiJavaPsiFacade: Class     Java specific utility to search classes
## - GlobalSearchScope: Class    class to create search scopes, used by above utilities
## - EntryFactory: Class         EntryFactory.of(...) to turn PsiXXX to XXXEntry.
##
## Other feature
## -------------
## - Auto import.      If the generated code contains full qualified name, Code Generator will try to
##                     import the packages automatically and shorten the name.
##                     For example `java.util.List&lt;&gt;` -&gt; `List&lt;&gt;`
##
## References
## ----------
## - Velocity syntax: http://velocity.apache.org/engine/1.7/user-guide.html

@org.junit.jupiter.api.Test
public void testGetFieldNameByGetterSetter() {
#foreach($field in ${class1.fields})
  #if (!$field.modifierStatic)
    #set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))
    #if ($field.boolean)
      #set($getter = "is${name}")
    #else
      #set($getter = "get${name}")
    #end
    #set($setter = "set${name}")
  assertEquals("${field.name}", getFieldName(${class1.name}.class, ${class1.name}::${getter}));
  assertEquals("${field.name}", getFieldName(${class1.name}.class, ${class1.name}::${setter}));
  #end
#end
}
</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <classSelection>
                    <initialClass>$class0.qualifiedName</initialClass>
                    <enabled>true</enabled>
                    <postfix>1</postfix>
                </classSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>${class0.qualifiedName}Test</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
    </templates>
</codeTemplateList>
